<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Masashi Shibamoto on Masashi Shibamoto</title>
    <link>/</link>
    <description>Recent content in Masashi Shibamoto on Masashi Shibamoto</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 04 Apr 2019 00:07:40 +0900</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Notify Google Home</title>
      <link>/project/notify-google-home/</link>
      <pubDate>Thu, 04 Apr 2019 00:07:40 +0900</pubDate>
      
      <guid>/project/notify-google-home/</guid>
      <description>

&lt;h2 id=&#34;notify-google-home&#34;&gt;Notify Google Home&lt;/h2&gt;

&lt;p&gt;Google Homeに任意のメッセージを通知することができる。&lt;/p&gt;

&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;

&lt;p&gt;Google Homeにメッセージを送ることはあるけど、
逆はないなと思い、発話できるのか調べてみた。
すると、google-home-notifierなるものを発見した。
ただ、色々と環境構築が複雑なため、dockerに押し込めることにした。&lt;/p&gt;

&lt;h2 id=&#34;機能&#34;&gt;機能&lt;/h2&gt;

&lt;p&gt;簡単に言うと下記&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Google HomeのIPアドレスとメッセージを指定して&lt;code&gt;docker run&lt;/code&gt;するだけで、発話させることができる。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;技術スタック&#34;&gt;技術スタック&lt;/h2&gt;

&lt;p&gt;node.js&lt;/p&gt;

&lt;h2 id=&#34;関連リポジトリ&#34;&gt;関連リポジトリ&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/Silver-birder/notify-message-by-google-home&#34; target=&#34;_blank&#34;&gt;https://github.com/Silver-birder/notify-message-by-google-home&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://hub.docker.com/r/silverbirder/simple-google-home-notifier&#34; target=&#34;_blank&#34;&gt;https://hub.docker.com/r/silverbirder/simple-google-home-notifier&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Random Amazon Ranking</title>
      <link>/project/random-amazon-ranking/</link>
      <pubDate>Sun, 31 Mar 2019 13:32:59 +0900</pubDate>
      
      <guid>/project/random-amazon-ranking/</guid>
      <description>

&lt;h2 id=&#34;random-amazon-ranking&#34;&gt;Random Amazon Ranking&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://res.cloudinary.com/silverbirder/image/upload/v1554006293/randomAmazonRanking/randomAmazonRanking.gif&#34; alt=&#34;output&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.amazon.co.jp/ranking?type=top-sellers&#34; target=&#34;_blank&#34;&gt;アマゾン売れ筋ランキング&lt;/a&gt;を適当に眺めていたら、
全く知らなかった興味深い商品を発見できた。
他にも同様の商品がないのか知りたくなり、このアプリを作った。&lt;/p&gt;

&lt;h2 id=&#34;機能&#34;&gt;機能&lt;/h2&gt;

&lt;p&gt;簡単に言うと下記&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;アマゾン売れ筋ランキングTOP3の商品のみを表示する&lt;/li&gt;
&lt;li&gt;アマゾンに存在する全カテゴリをランダムに3カテゴリ抽出する&lt;/li&gt;
&lt;li&gt;商品データは逐次取得しているため、リアルタイムな商品が見れる&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;技術スタック&#34;&gt;技術スタック&lt;/h2&gt;

&lt;p&gt;vue.js + node.js + now.sh&lt;/p&gt;

&lt;h2 id=&#34;関連リポジトリ&#34;&gt;関連リポジトリ&lt;/h2&gt;

&lt;p&gt;frontend vue.js&lt;br /&gt;
&lt;a href=&#34;https://github.com/Silver-birder/amazon-ranking-vue&#34; target=&#34;_blank&#34;&gt;https://github.com/Silver-birder/amazon-ranking-vue&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;backend node.js&lt;br /&gt;
&lt;a href=&#34;https://github.com/Silver-birder/amazon-ranking-api&#34; target=&#34;_blank&#34;&gt;https://github.com/Silver-birder/amazon-ranking-api&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Search Word Cloud</title>
      <link>/project/searchwordcloud/</link>
      <pubDate>Thu, 14 Mar 2019 22:03:13 +0900</pubDate>
      
      <guid>/project/searchwordcloud/</guid>
      <description>

&lt;h2 id=&#34;検索キーワードをworcloud化-searchwordcloud&#34;&gt;検索キーワードをWorCloud化 - SearchWordCloud&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://res.cloudinary.com/silverbirder/image/upload/v1552224172/word-cloud-chrome-extension/word-cloud-chrome-extension.gif&#34; alt=&#34;output&#34; /&gt;&lt;/p&gt;

&lt;p&gt;拡張機能のダウンロードは&lt;a href=&#34;https://chrome.google.com/webstore/detail/searchwordcloud/dbpmolojnmdfgggfnhlioepakmpjafal/related?hl=ja&amp;amp;gl=JP&#34; target=&#34;_blank&#34;&gt;こちら&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;

&lt;p&gt;googleのマイアクティビティから検索履歴をwordCloud化した
ツールを作ってみたのだが、それをリアルタイムでも見れるにしたいと考えた。&lt;/p&gt;

&lt;h2 id=&#34;機能&#34;&gt;機能&lt;/h2&gt;

&lt;p&gt;簡単に言うと下記&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;chrome拡張機能で、検索するたびにwordCloudが更新される&lt;/li&gt;
&lt;li&gt;データはgoogleアカウントに紐づくので、端末が異なっていても共有できる&lt;/li&gt;
&lt;li&gt;データをクリアできるオプションを用意している&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;技術スタック&#34;&gt;技術スタック&lt;/h2&gt;

&lt;p&gt;node.js&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Run Character</title>
      <link>/project/run-character/</link>
      <pubDate>Tue, 05 Mar 2019 00:15:20 +0900</pubDate>
      
      <guid>/project/run-character/</guid>
      <description>

&lt;h2 id=&#34;キャラクターがぐるぐる回るよ-run-character&#34;&gt;キャラクターがぐるぐる回るよ！ - Run Character&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://res.cloudinary.com/silverbirder/image/upload/v1551712398/run_character/run_character.mov.gif&#34; alt=&#34;output&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;

&lt;p&gt;デスクトップ画面がなんだか寂しいなと感じたのがきっかけ。
画面の周りをぐるぐる回るキャラクターがほしいなと思った。&lt;/p&gt;

&lt;h2 id=&#34;機能&#34;&gt;機能&lt;/h2&gt;

&lt;p&gt;簡単に言うと下記&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;好きなキャラクターを選べる(いまのところハロウィンのみ)&lt;/li&gt;
&lt;li&gt;開始後、デスクトップの周りをぐるぐる回る&lt;/li&gt;
&lt;li&gt;止まる手段はない！ので、強制終了させる&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;技術スタック&#34;&gt;技術スタック&lt;/h2&gt;

&lt;p&gt;electron&lt;/p&gt;

&lt;h2 id=&#34;関連リポジトリ&#34;&gt;関連リポジトリ&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/Silver-birder/run_character&#34; target=&#34;_blank&#34;&gt;https://github.com/Silver-birder/run_character&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Managed EA</title>
      <link>/project/managed-ea/</link>
      <pubDate>Mon, 04 Mar 2019 22:19:28 +0900</pubDate>
      
      <guid>/project/managed-ea/</guid>
      <description>

&lt;h2 id=&#34;ea管理システム-managed-ea&#34;&gt;EA管理システム - Managed-EA&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://res.cloudinary.com/silverbirder/image/upload/v1551705895/managed-ea/managed-ea.png&#34; alt=&#34;output&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;

&lt;p&gt;EAを複数人で利用している想定のため、いくつかほしい機能があった。&lt;/p&gt;

&lt;h2 id=&#34;機能&#34;&gt;機能&lt;/h2&gt;

&lt;p&gt;簡単に言うと下記&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;EAを使うユーザーの認証&lt;/li&gt;
&lt;li&gt;EAを使うユーザーの登録・編集&lt;/li&gt;
&lt;li&gt;各ユーザーの決済履歴&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;技術スタック&#34;&gt;技術スタック&lt;/h2&gt;

&lt;p&gt;react + dataStore + GAE&lt;/p&gt;

&lt;p&gt;こちらは、下記をフォークしFeaturesをいくつか追加したもの
&lt;a href=&#34;https://github.com/osamu38/react-ssr-starter&#34; target=&#34;_blank&#34;&gt;https://github.com/osamu38/react-ssr-starter&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;関連リポジトリ&#34;&gt;関連リポジトリ&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/Silver-birder/managed-ea&#34; target=&#34;_blank&#34;&gt;https://github.com/Silver-birder/managed-ea&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Web Ar</title>
      <link>/project/web-ar/</link>
      <pubDate>Mon, 04 Mar 2019 22:04:29 +0900</pubDate>
      
      <guid>/project/web-ar/</guid>
      <description>

&lt;h2 id=&#34;web上でar体験-web-ar&#34;&gt;Web上でAR体験 - Web-AR&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://res.cloudinary.com/silverbirder/image/upload/v1551709070/web-ar/web-ar.gif&#34; alt=&#34;output&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=rIPfpGCxONQ&#34; target=&#34;_blank&#34;&gt;https://www.youtube.com/watch?v=rIPfpGCxONQ&lt;/a&gt;
この動画が発端となる。&lt;/p&gt;

&lt;p&gt;ARをどうしても触ってみたかった。
ただ、ネイティブアプリではなくWeb上で表現できないか考えていた。
three.jsを使えばイケるかも！？とやってみた。&lt;/p&gt;

&lt;h2 id=&#34;機能&#34;&gt;機能&lt;/h2&gt;

&lt;p&gt;簡単に言うと下記&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;three.jsで現実世界にオブジェクトを生成する&lt;/li&gt;
&lt;li&gt;座標位置とオブジェクトとの距離により見え方が変わる&lt;/li&gt;
&lt;li&gt;オブジェクトに接すると、中の世界が見えるようになる&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;技術スタック&#34;&gt;技術スタック&lt;/h2&gt;

&lt;p&gt;javascript(three.js)&lt;/p&gt;

&lt;h2 id=&#34;関連リポジトリ&#34;&gt;関連リポジトリ&lt;/h2&gt;

&lt;p&gt;frontend javascript(three.js)&lt;br /&gt;
backend golang&lt;br /&gt;
&lt;a href=&#34;https://github.com/Silver-birder/web-ar&#34; target=&#34;_blank&#34;&gt;https://github.com/Silver-birder/web-ar&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Text_lint</title>
      <link>/project/text_lint/</link>
      <pubDate>Mon, 04 Mar 2019 22:03:41 +0900</pubDate>
      
      <guid>/project/text_lint/</guid>
      <description>

&lt;h2 id=&#34;文章向けlinter-text-lint&#34;&gt;文章向けLinter - text_lint&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$ npm install
$ echo &amp;quot;I love docker&amp;quot; &amp;gt;&amp;gt; sample.md
$ npm run lint sample.md -s
text_lint/sample.md
  1:8  ✓ error  docker =&amp;gt; Docker  prh

✖ 1 problem (1 error, 0 warnings)
✓ 1 fixable problem.
Try to run: $ textlint --fix [file]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;

&lt;p&gt;文章を書いていて、表記ゆれが多々あった。
それをなんとか防ぎたかった。&lt;/p&gt;

&lt;h2 id=&#34;機能&#34;&gt;機能&lt;/h2&gt;

&lt;p&gt;簡単に言うと下記&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;有名なIT向け辞書を登録済みなので、誤りを検知してくれる。&lt;/li&gt;
&lt;li&gt;git hookと合わせれば、commit時に検知できる。&lt;/li&gt;
&lt;li&gt;辞書をカスタマイズできるので、自分にあった検知が作れる。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;技術スタック&#34;&gt;技術スタック&lt;/h2&gt;

&lt;p&gt;node.js&lt;/p&gt;

&lt;h2 id=&#34;関連リポジトリ&#34;&gt;関連リポジトリ&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/Silver-birder/text_lint&#34; target=&#34;_blank&#34;&gt;https://github.com/Silver-birder/text_lint&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Share Session</title>
      <link>/project/share-session/</link>
      <pubDate>Mon, 04 Mar 2019 22:03:35 +0900</pubDate>
      
      <guid>/project/share-session/</guid>
      <description>

&lt;h2 id=&#34;セッション共有-share-session&#34;&gt;セッション共有 - Share-Session&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://res.cloudinary.com/silverbirder/image/upload/v1551707379/share-session/share-session.png&#34; alt=&#34;output&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;

&lt;p&gt;とあるサービスのアカウントを共有したかった。&lt;/p&gt;

&lt;h2 id=&#34;機能&#34;&gt;機能&lt;/h2&gt;

&lt;p&gt;簡単に言うと下記&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cookieデータを登録・編集できる&lt;/li&gt;
&lt;li&gt;ブックマークレットから、共有したいサイトでCookie設定できる&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;技術スタック&#34;&gt;技術スタック&lt;/h2&gt;

&lt;p&gt;golang + dataStore + GAE&lt;/p&gt;

&lt;h2 id=&#34;関連リポジトリ&#34;&gt;関連リポジトリ&lt;/h2&gt;

&lt;p&gt;frontend　and backend golang
&lt;a href=&#34;https://github.com/Silver-birder/share_session&#34; target=&#34;_blank&#34;&gt;https://github.com/Silver-birder/share_session&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Search Local Web</title>
      <link>/project/search-local-web/</link>
      <pubDate>Mon, 04 Mar 2019 22:03:28 +0900</pubDate>
      
      <guid>/project/search-local-web/</guid>
      <description>

&lt;h2 id=&#34;ローカル検索-search-local-web&#34;&gt;ローカル検索 - Search-Local-Web&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://res.cloudinary.com/silverbirder/image/upload/v1551706593/search-local-web/search-local-web.png&#34; alt=&#34;output&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;

&lt;p&gt;過去に検索した記事を思い出せず、苦労したことがある。
検索履歴をローカルに保存して全文検索できるようにしたい。&lt;/p&gt;

&lt;h2 id=&#34;機能&#34;&gt;機能&lt;/h2&gt;

&lt;p&gt;簡単に言うと下記&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;URLからHTMLを取得し、googleDriveにドキュメント保存できる&lt;/li&gt;
&lt;li&gt;思い出しているキーワードから全文検索できる(googleDriveApi)&lt;/li&gt;
&lt;li&gt;LINKから、記事をアクセスできる&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;技術スタック&#34;&gt;技術スタック&lt;/h2&gt;

&lt;p&gt;node.js(express) + googleDrive + GAE&lt;/p&gt;

&lt;h2 id=&#34;関連リポジトリ&#34;&gt;関連リポジトリ&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/Silver-birder/search-local-web&#34; target=&#34;_blank&#34;&gt;https://github.com/Silver-birder/search-local-web&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ReactNative_Web_Electron</title>
      <link>/project/reactnative_web_electron/</link>
      <pubDate>Mon, 04 Mar 2019 22:03:14 +0900</pubDate>
      
      <guid>/project/reactnative_web_electron/</guid>
      <description>

&lt;h2 id=&#34;reactnative-web-electron-one-logic&#34;&gt;ReactNative_Web_Electron - One Logic&lt;/h2&gt;

&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;

&lt;p&gt;WebApp,MobileApp,DesktopAppを共通の言語で開発したいなと考えていた。
View側はプラットフォーム毎に用意して、Logicは共通化したかった。
(仕組みは用意したものの、途中で諦めた)&lt;/p&gt;

&lt;h2 id=&#34;機能&#34;&gt;機能&lt;/h2&gt;

&lt;p&gt;簡単に言うと下記&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;src/native, src/webでプラットフォーム毎のViewを作成できる&lt;/li&gt;
&lt;li&gt;src/actionsでロジック部分を共通化する&lt;/li&gt;
&lt;li&gt;src/storeでデータを集約する&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;技術スタック&#34;&gt;技術スタック&lt;/h2&gt;

&lt;p&gt;reactNative + react.js + electron　+ expo.io&lt;/p&gt;

&lt;h2 id=&#34;関連リポジトリ&#34;&gt;関連リポジトリ&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/Silver-birder/rss_reader&#34; target=&#34;_blank&#34;&gt;https://github.com/Silver-birder/rss_reader&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Amazon Calendar</title>
      <link>/project/gas-for-amazon-calendar/</link>
      <pubDate>Mon, 04 Mar 2019 22:02:12 +0900</pubDate>
      
      <guid>/project/gas-for-amazon-calendar/</guid>
      <description>

&lt;h2 id=&#34;amazoncalendar-gas-for-amazon-calendar&#34;&gt;AmazonCalendar - Gas for Amazon Calendar&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://res.cloudinary.com/silverbirder/image/upload/v1551707741/gas-for-amazon-calendar/gas-for-amazon-calendar.png&#34; alt=&#34;output&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;

&lt;p&gt;アマゾンで買った商品がいつ届くのかメールを
いつも見ていたが、不便と感じた。googleCalendar
に登録されればなと思った。&lt;/p&gt;

&lt;h2 id=&#34;機能&#34;&gt;機能&lt;/h2&gt;

&lt;p&gt;簡単に言うと下記&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Amazonで購入した際に送られるメールからgoogleCalandarに「いつ届くのか」登録してくれる&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;技術スタック&#34;&gt;技術スタック&lt;/h2&gt;

&lt;p&gt;gas + gmail + googleCalendar&lt;/p&gt;

&lt;h2 id=&#34;関連リポジトリ&#34;&gt;関連リポジトリ&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/Silver-birder/gas-for-amazon-calendar&#34; target=&#34;_blank&#34;&gt;https://github.com/Silver-birder/gas-for-amazon-calendar&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Control EA</title>
      <link>/project/control-ea/</link>
      <pubDate>Mon, 04 Mar 2019 22:01:54 +0900</pubDate>
      
      <guid>/project/control-ea/</guid>
      <description>

&lt;h2 id=&#34;eaの制御システム-control-ea&#34;&gt;EAの制御システム - Control-EA&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://res.cloudinary.com/silverbirder/image/upload/v1551705139/control-ea/control-ea.gif&#34; alt=&#34;output&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;

&lt;p&gt;FXでEAという自動売買プログラムがあるのだが、
外部から注文を停止・決済させたいときがあった。
&lt;a href=&#34;https://www.fxstreet.jp/economic-calendar&#34; target=&#34;_blank&#34;&gt;https://www.fxstreet.jp/economic-calendar&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;要人発表時は、相場が大きく揺れてしまうので制御したかった。&lt;/p&gt;

&lt;h2 id=&#34;機能&#34;&gt;機能&lt;/h2&gt;

&lt;p&gt;簡単に言うと下記&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Webアプリ上で、要人発表データを操作できる&lt;/li&gt;
&lt;li&gt;要人発表データをEAがほぼリアルタイムに監視している&lt;/li&gt;
&lt;li&gt;ボラリティが高い相場時間帯は、注文しないようにする&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;技術スタック&#34;&gt;技術スタック&lt;/h2&gt;

&lt;p&gt;vue.js + golang + dataStore + now.sh&lt;/p&gt;

&lt;h2 id=&#34;関連リポジトリ&#34;&gt;関連リポジトリ&lt;/h2&gt;

&lt;p&gt;frontend vue.js
&lt;a href=&#34;https://github.com/Silver-birder/control-ea&#34; target=&#34;_blank&#34;&gt;https://github.com/Silver-birder/control-ea&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;backend golang
&lt;a href=&#34;https://github.com/Silver-birder/control-ea-api&#34; target=&#34;_blank&#34;&gt;https://github.com/Silver-birder/control-ea-api&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;batch node.js
&lt;a href=&#34;https://github.com/Silver-birder/control-ea-batch&#34; target=&#34;_blank&#34;&gt;https://github.com/Silver-birder/control-ea-batch&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Google Word Cloud</title>
      <link>/project/google-word-cloud/</link>
      <pubDate>Mon, 04 Mar 2019 22:01:42 +0900</pubDate>
      
      <guid>/project/google-word-cloud/</guid>
      <description>

&lt;h2 id=&#34;google検索履歴をwordcloud化-google-word-cloud&#34;&gt;Google検索履歴をWordCloud化 - Google Word Cloud&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://res.cloudinary.com/silverbirder/image/upload/v1551595196/google-word-cloud/%E3%83%9E%E3%82%A4%E3%82%A2%E3%82%AF%E3%83%86%E3%82%A3%E3%83%92%E3%82%99%E3%83%86%E3%82%A3.json.201901.json.txt.png&#34; alt=&#34;output&#34; /&gt;
上記は、2019年1月のGoogle検索履歴。
golangとvueにハマっていた。&lt;/p&gt;

&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;

&lt;p&gt;下記のページより、Googleで検索したデータをダウンロードできることを知った。
&lt;a href=&#34;https://takeout.google.com&#34; target=&#34;_blank&#34;&gt;https://takeout.google.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;そこで、WordCloudに流したら面白そうではないかと思った。&lt;/p&gt;

&lt;h2 id=&#34;機能&#34;&gt;機能&lt;/h2&gt;

&lt;p&gt;簡単に言うと下記&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Google検索のような検索結果のjsonファイルを月毎に分割できる&lt;/li&gt;
&lt;li&gt;検索結果のjsonファイルから単語を抽出できる&lt;/li&gt;
&lt;li&gt;抽出した結果をWordCloudで出力した画像を取得できる&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Google検索だけでなく下記も出力できる（他も可能かもしれないが私自身にデータがなかった)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Gmail&lt;/li&gt;
&lt;li&gt;GoogleApps&lt;/li&gt;
&lt;li&gt;YouTube&lt;/li&gt;
&lt;li&gt;Drive&lt;/li&gt;
&lt;li&gt;Map&lt;/li&gt;
&lt;li&gt;画像検索&lt;/li&gt;
&lt;li&gt;動画検索&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;技術スタック&#34;&gt;技術スタック&lt;/h2&gt;

&lt;p&gt;python&lt;/p&gt;

&lt;h2 id=&#34;関連リポジトリ&#34;&gt;関連リポジトリ&lt;/h2&gt;

&lt;p&gt;python
&lt;a href=&#34;https://github.com/Silver-birder/google-word-cloud&#34; target=&#34;_blank&#34;&gt;https://github.com/Silver-birder/google-word-cloud&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Book Store</title>
      <link>/project/book-store/</link>
      <pubDate>Fri, 01 Mar 2019 22:43:36 +0900</pubDate>
      
      <guid>/project/book-store/</guid>
      <description>

&lt;h2 id=&#34;書籍管理システム-book-store&#34;&gt;書籍管理システム - Book-Store&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://res.cloudinary.com/silverbirder/image/upload/v1548220071/book-store-vue.mov.gif&#34; alt=&#34;output&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;

&lt;p&gt;今持っている本がどれぐらいあるのか管理したくなったところから始まった&lt;/p&gt;

&lt;h2 id=&#34;機能&#34;&gt;機能&lt;/h2&gt;

&lt;p&gt;簡単に言うと下記&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;全文検索で書籍を検索できる&lt;/li&gt;
&lt;li&gt;ISBNで書籍登録できるし、変更もできる&lt;/li&gt;
&lt;li&gt;Amazonリンクにつながる&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;技術スタック&#34;&gt;技術スタック&lt;/h2&gt;

&lt;p&gt;vue.js + golang + algolia + now.sh&lt;/p&gt;

&lt;h2 id=&#34;関連リポジトリ&#34;&gt;関連リポジトリ&lt;/h2&gt;

&lt;p&gt;frontend vue.js
&lt;a href=&#34;https://github.com/Silver-birder/book-store-vue&#34; target=&#34;_blank&#34;&gt;https://github.com/Silver-birder/book-store-vue&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;backend golang
&lt;a href=&#34;https://github.com/Silver-birder/book-store-go&#34; target=&#34;_blank&#34;&gt;https://github.com/Silver-birder/book-store-go&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
